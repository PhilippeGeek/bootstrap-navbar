{"name":"Bootstrap-navbar","tagline":"Helpers to generate a Twitter Bootstrap style navbar","body":"# BootstrapNavbar\r\n\r\n[![Gem Version](https://badge.fury.io/rb/bootstrap-navbar.png)](http://badge.fury.io/rb/bootstrap-navbar)\r\n[![Build Status](https://secure.travis-ci.org/krautcomputing/bootstrap-navbar.png)](http://travis-ci.org/krautcomputing/bootstrap-navbar)\r\n[![Dependency Status](https://gemnasium.com/krautcomputing/bootstrap-navbar.png)](https://gemnasium.com/krautcomputing/bootstrap-navbar)\r\n[![Code Climate](https://codeclimate.com/github/krautcomputing/bootstrap-navbar.png)](https://codeclimate.com/github/krautcomputing/bootstrap-navbar)\r\n\r\nHelpers to generate a Twitter Bootstrap style navbar\r\n\r\n## Installation\r\n\r\nThis gem only provides a helper module with methods to generate HTML. It can be used by other gems to make these helpers available to a framework's rendering engine, e.g.:\r\n\r\n* For Rails: https://github.com/julescopeland/Rails-Bootstrap-Navbar\r\n* For [Middleman](http://middlemanapp.com/): https://github.com/krautcomputing/middleman-bootstrap-navbar\r\n\r\nIn short: __Unless you know what you're doing, do not use this gem directly in your app!__\r\n\r\n## Requirements\r\n\r\nOnly Bootstrap >= 2.1.0 is supported. It might work with earlier versions as well though.\r\n\r\n## Setup\r\n\r\n### Set bootstrap_version (required)\r\n\r\nBootstrapNavbar needs to know what version of Bootstrap it's dealing with since each version has small changes compared to the previous one.\r\n\r\n```ruby\r\nBootstrapNavbar.configure do |config|\r\n  config.bootstrap_version = '3.0.0'\r\nend\r\n```\r\n\r\n### Set current_url_method (required)\r\n\r\nBootstrapNavbar has to be able to query for the current URL when rendering the navbar, e.g. to determine if a menu item is active or not. Since the way the current URL is determined varies depending on whether you use Rails, Sinatra, etc., this has to be set beforehand in some kind of initializer:\r\n\r\n```ruby\r\n# For Rails >= 3.2\r\nBootstrapNavbar.configure do |config|\r\n  config.current_url_method = 'request.original_url'\r\nend\r\n```\r\n\r\n`current_url_method` should be set to a string which can be `eval`ed later.\r\n\r\n### Set up HTML escaping (optional)\r\n\r\nIf the framework or rendering engine that you use BootstrapNavbar with escapes HTML by default, you can instruct BootstrapNavbar to mark the returned HTML as html_safe by default by overriding `BootstrapNavbar#prepare_html`:\r\n\r\n```ruby\r\n# For Rails\r\nmodule BootstrapNavbar::Helpers\r\n  def prepare_html(html)\r\n    html.html_safe\r\n  end\r\nend\r\n```\r\n\r\n### Mix in the helpers into the rendering engine (required)\r\n\r\n```ruby\r\n# For Rails\r\nActionView::Base.send :include, BootstrapNavbar::Helpers\r\n```\r\n\r\n## Usage\r\n\r\nCheck out the [Twitter Bootstrap docs](http://twitter.github.io/bootstrap/components.html#navbar) for how a navbar can be constructed. All components and options mentioned there should be supported by this gem, so you don't need to write any HTML by hand. If there is something missing or wrong HTML is generated, please [open an issue](https://github.com/krautcomputing/bootstrap-navbar/issues).\r\n\r\nLet's assume you have mixed in the helper in your rendering engine and use Haml.\r\n\r\n### Full example\r\n\r\n```ruby\r\n= navbar brand: 'My great app', brand_link: '/home', fixed: :top, responsive: true do\r\n  = menu_group class: 'foo', id: 'menu' do\r\n    = menu_text 'Pick an option:'\r\n    = menu_item \"Home\", root_path\r\n    = menu_item \"About Us\", about_us_path\r\n    = menu_item contact_path do\r\n      = image_tag 'contact.jpg'\r\n      Contact Us!\r\n    = menu_divider\r\n    = drop_down \"Stuff\" do\r\n      = drop_down_header 'Great stuff!'\r\n      = menu_item \"One\", one_path\r\n      = menu_item \"Two\", two_path\r\n      = menu_item \"Three\", three_path\r\n      - if current_user.admin?\r\n        = drop_down_divider\r\n        = sub_drop_down 'Admin Stuff' do\r\n          = menu_item \"Admin Dashboard\", admin_path\r\n          = menu_item \"Users\", admin_users_path\r\n  = menu_group pull: 'right' do\r\n    - if current_user\r\n      = menu_item \"Log Out\", log_out_path\r\n    - else\r\n      = menu_item \"Log In\", log_in_path\r\n```\r\n\r\n### Methods\r\n\r\n#### navbar\r\n\r\nThis method sets up the basic structure of a navbar.\r\n\r\n```haml\r\n= navbar\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<div class=\"navbar\">\r\n  <div class=\"navbar-inner\">\r\n    <div class=\"container\">\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nThe content of the navbar is supplied by the block and the available options:\r\n\r\n```haml\r\n= navbar do\r\n  Yay!\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<div class=\"navbar\">\r\n  <div class=\"navbar-inner\">\r\n    <div class=\"container\">\r\n      Yay!\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nOptions `brand` and `brand_link` autogenerate the brand link:\r\n\r\n```haml\r\n= navbar brand: 'My great app', brand_link: '/start'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<div class=\"navbar\">\r\n  <div class=\"navbar-inner\">\r\n    <div class=\"container\">\r\n      <a href=\"/start\" class=\"brand\">My great app</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nIf only `brand` is defined, `brand_link` defaults to `/`.\r\n\r\nOption `responsive` generates a responsive navbar:\r\n\r\n```haml\r\n= navbar responsive: true\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<div class=\"navbar\">\r\n  <div class=\"navbar-inner\">\r\n    <div class=\"container\">\r\n      <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\r\n        <span class='icon-bar'></span>\r\n        <span class='icon-bar'></span>\r\n        <span class='icon-bar'></span>\r\n      </a>\r\n      <div class=\"nav-collapse collapse\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n**Attention: when using the `responsive` option, the brand link should not be added through the `brand_link` method but directly supplied to the `navbar` call.**\r\n\r\nDon't do this:\r\n\r\n```haml\r\n= navbar responsive: true do\r\n  = brand_link 'My great app', '/home'\r\n```\r\n\r\nDo this:\r\n\r\n```haml\r\n= navbar responsive: true, brand: 'My great app', brand_link: '/home'\r\n```\r\n\r\nOtherwise the brand link will be nested incorrectly and will disappear when resizing the window to a smaller size.\r\n\r\nOption `fluid` changes the grid system to be [fluid](http://twitter.github.io/bootstrap/scaffolding.html#fluidGridSystem):\r\n\r\n```haml\r\n= navbar fluid: true\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<div class=\"navbar\">\r\n  <div class=\"navbar-inner\">\r\n    <div class=\"container-fluid\">\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n#### brand_link\r\n\r\nThis method generates a menu divider, to be used in a `navbar`.\r\n\r\n```haml\r\n= brand_link 'My App', '/home'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<a href=\"/home\" class=\"brand\">My App</a>\r\n```\r\n\r\nIf the path (`/home` in this case) is not specified, it defaults to `/`.\r\n\r\n#### menu_text\r\n\r\nThis method generates some menu text, to be used in a `navbar`.\r\n\r\n```haml\r\n= menu_text 'Select a option:'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<p class=\"navbar-text\">\r\n  Select a option:\r\n</p>\r\n```\r\n\r\nA option can be supplied to make the text float to the right or left:\r\n\r\n```haml\r\n= menu_text 'Select a option:', :right\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<p class=\"navbar-text pull-right\">\r\n  Select a option:\r\n</p>\r\n```\r\n\r\nThe content can alternatively be supplied in a block:\r\n\r\n```haml\r\n= menu_text do\r\n  Current country:\r\n  = image_text 'flags/en.jpg'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<p class=\"navbar-text\">\r\n  Current country:\r\n  <img src=\"/images/flags/en.jpg\">\r\n</p>\r\n```\r\n\r\n#### menu_group\r\n\r\nThis method generates a menu group, to be used in a `navbar`.\r\n\r\n```haml\r\n= menu_group\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<ul class=\"nav\">\r\n</ul>\r\n```\r\n\r\nThe content of the menu group is supplied by the blocks:\r\n\r\n```haml\r\n= menu_group do\r\n  Yay!\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<ul class=\"nav\">\r\n  Yay!\r\n</ul>\r\n```\r\n\r\nYou can add a `pull` option to make the group float to the right or left, and add more classes and other attributes:\r\n\r\n```haml\r\n= menu_group pull: 'right', class: 'large', id: 'menu'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<ul class=\"nav pull-right large\" id=\"menu\">\r\n</ul>\r\n```\r\n\r\n#### menu_item\r\n\r\nThis method generates a menu item, to be used in a `menu_group`.\r\n\r\n```haml\r\n= menu_item 'Home', '/home'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li>\r\n  <a href=\"/home\">\r\n    Home\r\n  </a>\r\n</li>\r\n```\r\n\r\nIf the path (`/home` in this case) is not specified, it defaults to `#`.\r\n\r\nYou can also use a block (e.g., in case the link name is more than a single word):\r\n\r\n```haml\r\n= menu_item /home' do\r\n  = image_tag 'home.png'\r\n  Home\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li>\r\n  <a href=\"/home\">\r\n    <img src=\"/images/home.png\">\r\n    Home\r\n  </a>\r\n</li>\r\n```\r\n\r\nYou can add options that will be passed on to the `li` and `a` elements:\r\n\r\n```haml\r\n= menu_item 'Home', '/home', { class: 'list-item' }, { id: 'home' }\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"list-item\">\r\n  <a href=\"/home\" id=\"home\">\r\n    Home\r\n  </a>\r\n</li>\r\n```\r\n\r\nIf the specified path/URL is the [current url](#set-current_url_method-required), it will be marked as `active`. Note that it doesn't matter if you link to a full URL or just the path, or if `BootstrapNavbar.configuration.current_url_method` returns a full URL or just the path, it will work regardless.\r\n\r\n```haml\r\n= menu_item 'Home', '/home'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<!-- If the current path is /home -->\r\n\r\n<li class=\"active\">\r\n  <a href=\"/home\">\r\n    Home\r\n  </a>\r\n</li>\r\n```\r\n\r\n#### menu_divider\r\n\r\nThis method generates a menu divider, to be used in a `menu_group`.\r\n\r\n```haml\r\n= menu_divider\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"divider-vertical\"></li>\r\n```\r\n\r\n#### drop_down\r\n\r\nThis method generates a dropdown, to be used in a `menu_group`.\r\n\r\n```haml\r\n= drop_down 'Settings'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"dropdown\">\r\n  <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\r\n    Settings <b class=\"caret\"></b>\r\n  </a>\r\n  <ul class=\"dropdown-menu\">\r\n  </ul>\r\n</li>\r\n```\r\n\r\nThe content of the dropdown can be defined in the block using `menu_item`s:\r\n\r\n```haml\r\n= drop_down 'Settings' do\r\n  = menu_item 'Basic', '/settings/basic'\r\n  = menu_item 'Advanced', '/settings/advanced'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"dropdown\">\r\n  <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\r\n    Settings <b class=\"caret\"></b>\r\n  </a>\r\n  <ul class=\"dropdown-menu\">\r\n    <li>\r\n      <a href=\"/settings/basic\">\r\n        Basic\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/settings/advanced\">\r\n        Advanced\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</li>\r\n```\r\n\r\n#### sub_drop_down\r\n\r\nThis method generates a sub dropdown, to be used in a `drop_down`.\r\n\r\n```haml\r\n= sub_drop_down 'Admin Settings'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"dropdown-submenu\">\r\n  <a href=\"#\">\r\n    Admin Settings\r\n  </a>\r\n  <ul class=\"dropdown-menu\">\r\n  </ul>\r\n</li>\r\n```\r\n\r\nJust like in the `drop_down`, the content of the sub dropdown is defined in the block:\r\n\r\n```haml\r\n= sub_drop_down 'Admin Settings' do\r\n  = menu_item 'Users', '/settings/admin/users'\r\n  = menu_item 'Stats', '/settings/admin/stats'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"dropdown-submenu\">\r\n  <a href=\"#\">\r\n    Admin Settings\r\n  </a>\r\n  <ul class=\"dropdown-menu\">\r\n    <li>\r\n      <a href=\"/settings/admin/users\">\r\n        Users\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/settings/admin/stats\">\r\n        Stats\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</li>\r\n```\r\n\r\n#### drop_down_divider\r\n\r\nThis method generates a dropdown divider, to be used in a `drop_down` or `sub_drop_down`.\r\n\r\n```haml\r\n= drop_down_divider\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"divider\"></li>\r\n```\r\n\r\n#### drop_down_header\r\n\r\nThis method generates a dropdown header, to be used in a `drop_down` or `sub_drop_down`.\r\n\r\n```haml\r\n= drop_down_header 'Important!'\r\n```\r\n\r\ngenerates:\r\n\r\n```html\r\n<li class=\"nav-header\">Important!</li>\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}